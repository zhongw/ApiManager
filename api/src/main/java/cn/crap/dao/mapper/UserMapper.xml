<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.crap.dao.mybatis.UserDao" >
  <resultMap id="BaseResultMap" type="cn.crap.model.mybatis.User" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="userName" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="trueName" property="trueName" jdbcType="VARCHAR" />
    <result column="roleId" property="roleId" jdbcType="VARCHAR" />
    <result column="roleName" property="roleName" jdbcType="VARCHAR" />
    <result column="auth" property="auth" jdbcType="VARCHAR" />
    <result column="authName" property="authName" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="sequence" property="sequence" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="avatarUrl" property="avatarUrl" jdbcType="VARCHAR" />
    <result column="loginType" property="loginType" jdbcType="INTEGER" />
    <result column="thirdlyId" property="thirdlyId" jdbcType="VARCHAR" />
    <result column="passwordSalt" property="passwordSalt" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userName, password, trueName, roleId, roleName, auth, authName, createTime, status, 
    sequence, type, email, avatarUrl, loginType, thirdlyId, passwordSalt
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.crap.model.mybatis.UserCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <choose >
      <when test="limitStart != null and limitStart != -1 and maxResults != null and maxResults != -1" >
        limit ${limitStart} , ${maxResults}
      </when>
      <when test="limitStart != null and limitStart != -1" >
        limit ${limitStart}
      </when>
    </choose>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from user
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.crap.model.mybatis.UserCriteria" >
    delete from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.crap.model.mybatis.User" >
    insert into user (id, userName, password,
      trueName, roleId, roleName, 
      auth, authName, createTime, 
      status, sequence, type, 
      email, avatarUrl, loginType, 
      thirdlyId, passwordSalt)
    values (#{id,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{trueName,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, 
      #{auth,jdbcType=VARCHAR}, #{authName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=TINYINT}, #{sequence,jdbcType=INTEGER}, #{type,jdbcType=TINYINT}, 
      #{email,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR}, #{loginType,jdbcType=INTEGER}, 
      #{thirdlyId,jdbcType=VARCHAR}, #{passwordSalt,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.crap.model.mybatis.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="userName != null" >
        userName,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="trueName != null" >
        trueName,
      </if>
      <if test="roleId != null" >
        roleId,
      </if>
      <if test="roleName != null" >
        roleName,
      </if>
      <if test="auth != null" >
        auth,
      </if>
      <if test="authName != null" >
        authName,
      </if>
      <if test="createTime != null" >
        createTime,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="sequence != null" >
        sequence,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="avatarUrl != null" >
        avatarUrl,
      </if>
      <if test="loginType != null" >
        loginType,
      </if>
      <if test="thirdlyId != null" >
        thirdlyId,
      </if>
      <if test="passwordSalt != null" >
        passwordSalt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=VARCHAR},
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="trueName != null" >
        #{trueName,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="auth != null" >
        #{auth,jdbcType=VARCHAR},
      </if>
      <if test="authName != null" >
        #{authName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="sequence != null" >
        #{sequence,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null" >
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="loginType != null" >
        #{loginType,jdbcType=INTEGER},
      </if>
      <if test="thirdlyId != null" >
        #{thirdlyId,jdbcType=VARCHAR},
      </if>
      <if test="passwordSalt != null" >
        #{passwordSalt,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.crap.model.mybatis.UserCriteria" resultType="java.lang.Integer" >
    select count(*) from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.userName != null" >
        userName = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.trueName != null" >
        trueName = #{record.trueName,jdbcType=VARCHAR},
      </if>
      <if test="record.roleId != null" >
        roleId = #{record.roleId,jdbcType=VARCHAR},
      </if>
      <if test="record.roleName != null" >
        roleName = #{record.roleName,jdbcType=VARCHAR},
      </if>
      <if test="record.auth != null" >
        auth = #{record.auth,jdbcType=VARCHAR},
      </if>
      <if test="record.authName != null" >
        authName = #{record.authName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.sequence != null" >
        sequence = #{record.sequence,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.avatarUrl != null" >
        avatarUrl = #{record.avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.loginType != null" >
        loginType = #{record.loginType,jdbcType=INTEGER},
      </if>
      <if test="record.thirdlyId != null" >
        thirdlyId = #{record.thirdlyId,jdbcType=VARCHAR},
      </if>
      <if test="record.passwordSalt != null" >
        passwordSalt = #{record.passwordSalt,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user
    set id = #{record.id,jdbcType=VARCHAR},
      userName = #{record.userName,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      trueName = #{record.trueName,jdbcType=VARCHAR},
      roleId = #{record.roleId,jdbcType=VARCHAR},
      roleName = #{record.roleName,jdbcType=VARCHAR},
      auth = #{record.auth,jdbcType=VARCHAR},
      authName = #{record.authName,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=TINYINT},
      sequence = #{record.sequence,jdbcType=INTEGER},
      type = #{record.type,jdbcType=TINYINT},
      email = #{record.email,jdbcType=VARCHAR},
      avatarUrl = #{record.avatarUrl,jdbcType=VARCHAR},
      loginType = #{record.loginType,jdbcType=INTEGER},
      thirdlyId = #{record.thirdlyId,jdbcType=VARCHAR},
      passwordSalt = #{record.passwordSalt,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.crap.model.mybatis.User" >
    update user
    <set >
      <if test="userName != null" >
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="trueName != null" >
        trueName = #{trueName,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        roleId = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        roleName = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="auth != null" >
        auth = #{auth,jdbcType=VARCHAR},
      </if>
      <if test="authName != null" >
        authName = #{authName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="sequence != null" >
        sequence = #{sequence,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null" >
        avatarUrl = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="loginType != null" >
        loginType = #{loginType,jdbcType=INTEGER},
      </if>
      <if test="thirdlyId != null" >
        thirdlyId = #{thirdlyId,jdbcType=VARCHAR},
      </if>
      <if test="passwordSalt != null" >
        passwordSalt = #{passwordSalt,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.crap.model.mybatis.User" >
    update user
    set userName = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      trueName = #{trueName,jdbcType=VARCHAR},
      roleId = #{roleId,jdbcType=VARCHAR},
      roleName = #{roleName,jdbcType=VARCHAR},
      auth = #{auth,jdbcType=VARCHAR},
      authName = #{authName,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=TINYINT},
      sequence = #{sequence,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT},
      email = #{email,jdbcType=VARCHAR},
      avatarUrl = #{avatarUrl,jdbcType=VARCHAR},
      loginType = #{loginType,jdbcType=INTEGER},
      thirdlyId = #{thirdlyId,jdbcType=VARCHAR},
      passwordSalt = #{passwordSalt,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>